webpackHotUpdate("static\\development\\pages\\index.js",{

/***/ "../../api/snippets.json":
/*!***********************************************************!*\
  !*** C:/Users/loref/Projects/greldal-2/api/snippets.json ***!
  \***********************************************************/
/*! exports provided: mapDataSource_user_simple, mapDataSource_user_simple_explicit, mapAssociation_multiJoin_custom, mapAssociation_leftOuterJoin_default, mapAssociation_leftOuterJoin_default_query, mapAssociation_sideLoading, default */
/***/ (function(module) {

module.exports = {"mapDataSource_user_simple":{"name":"mapDataSource_user_simple","content":"    /// import {mapDataSource, mapFields, types} from \"greldal\";\r\n\r\n    const users = mapDataSource({\r\n        name: \"User\",\r\n        fields: mapFields({\r\n            id: {\r\n                type: types.number,\r\n                to: GraphQLID,\r\n                isPrimary: true,\r\n            },\r\n            name: {\r\n                type: types.string,\r\n            },\r\n            age: {\r\n                type: types.integer,\r\n            },\r\n        }),\r\n    });\r\n"},"mapDataSource_user_simple_explicit":{"name":"mapDataSource_user_simple_explicit","content":"    /// import {mapDataSource, mapFields, types} from \"greldal\";\r\n\r\n    const users = mapDataSource({\r\n        name: {\r\n            mapped: \"User\",\r\n            stored: \"users\",\r\n        },\r\n        fields: mapFields({\r\n            id: {\r\n                sourceColumn: \"id\",\r\n                type: types.string,\r\n                to: {\r\n                    input: GraphQLID,\r\n                    output: GraphQLID,\r\n                },\r\n            },\r\n            name: {\r\n                sourceColumn: \"name\",\r\n                type: types.string,\r\n                to: {\r\n                    input: GraphQLString,\r\n                    output: GraphQLString,\r\n                },\r\n            },\r\n            age: {\r\n                sourceColumn: \"age\",\r\n                type: types.integer,\r\n                to: {\r\n                    input: GraphQLInt,\r\n                    output: GraphQLInt\r\n                }\r\n            }\r\n        }),\r\n    });\r\n"},"mapAssociation_multiJoin_custom":{"name":"mapAssociation_multiJoin_custom","content":"            /// import {mapDataSource, mapAssociations} from \"greldal\";\r\n            tags = mapDataSource({\r\n                name: \"Tag\",\r\n                fields,\r\n                associations: mapAssociations({\r\n                    products: {\r\n                        target: () => products,\r\n                        singular: false,\r\n                        fetchThrough: [\r\n                            {\r\n                                join: joinBuilder =>\r\n                                    joinBuilder\r\n                                        .leftOuterJoin(\"product_tag_associators\", \"tag_id\", \"=\", \"id\")\r\n                                        .leftOuterJoin(\"products\", \"id\", \"=\", \"product_id\"),\r\n                            },\r\n                        ],\r\n                    },\r\n                }),\r\n            });\r\n"},"mapAssociation_leftOuterJoin_default":{"name":"mapAssociation_leftOuterJoin_default","content":"            /// import {mapDataSource, mapAssociations} from \"greldal\";\r\n            products = mapDataSource({\r\n                name: \"Product\",\r\n                fields,\r\n                associations: mapAssociations({\r\n                    department: {\r\n                        target: () => departments,\r\n                        singular: true,\r\n                        fetchThrough: [\r\n                            {\r\n                                join: \"leftOuterJoin\",\r\n                            },\r\n                        ],\r\n                        associatorColumns: {\r\n                            inSource: \"department_id\",\r\n                            inRelated: \"id\",\r\n                        },\r\n                    },\r\n                }),\r\n            });\r\n"},"mapAssociation_leftOuterJoin_default_query":{"name":"mapAssociation_leftOuterJoin_default_query","content":"                `\r\n                    query {\r\n                        findOneProduct(where: {}) {\r\n                            id\r\n                            name\r\n                            department(where: {}) {\r\n                                id\r\n                                name\r\n                            }\r\n                        }\r\n                    }\r\n                `,\r\n"},"mapAssociation_sideLoading":{"name":"mapAssociation_sideLoading","content":"            /// import {mapDataSource, mapAssociations} from \"greldal\";\r\n\r\n            const departments = mapDataSource({\r\n                name: \"Department\",\r\n                fields: mapFields(fields),\r\n                associations: mapAssociations({\r\n                    products: {\r\n                        target: () => products,\r\n                        singular: false,\r\n                        associatorColumns: {\r\n                            inSource: \"id\",\r\n                            inRelated: \"department_id\",\r\n                        },\r\n                        fetchThrough: [\r\n                            // We can define multiple side-loading strategies here.\r\n                            //\r\n                            // When user queried by id of department, then we don't have to wait for the query on departments to complete\r\n                            // before we start fetching products. In case of preFetch strategy, these queries can happen in parallel, because\r\n                            // given the parameters used to query the data source we can start a parallel query to fetch all the products in\r\n                            // matching departments\r\n                            {\r\n                                useIf(operation) {\r\n                                    return has(operation.args, [\"where\", \"id\"]);\r\n                                },\r\n                                preFetch(operation) {\r\n                                    // What preFetch returns is a MappedForeignOperation - which basically points to another operation\r\n                                    // in the related data source (findManyProducts) and the arguments needed to initiate this operation.\r\n\r\n                                    const args: any = operation.args;\r\n                                    const department_id: string = args.where.id;\r\n                                    return {\r\n                                        operation: findManyProducts,\r\n                                        args: {\r\n                                            where: {\r\n                                                department_id,\r\n                                            },\r\n                                        },\r\n                                    };\r\n                                },\r\n                            },\r\n\r\n                            // However if the query parameters to departments are not enough to identify which products we need to fetch,\r\n                            // we can wait for the departments\r\n                            {\r\n                                postFetch(_operation, parents) {\r\n                                    // As above, we are instructing GRelDAL to initiate another operation in a foreign data source.\r\n                                    // However, in this case this body will execute once the query on parents has finished. So we have an array of\r\n                                    // fetched parents at our disposal which we can use to identify additional arguments to narrow down the\r\n                                    // subset of products to fetch.\r\n                                    return {\r\n                                        operation: findManyProductsByDepartmentIdList,\r\n                                        args: {\r\n                                            department_ids: map(parents, \"id\"),\r\n                                        },\r\n                                    };\r\n                                },\r\n                            },\r\n                        ],\r\n                    },\r\n                }),\r\n            });\r\n"}};

/***/ })

})
//# sourceMappingURL=index.js.f380a97a0e4fd82b19ed.hot-update.js.map