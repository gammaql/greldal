{"version":3,"file":"static/webpack/static/development/pages/index.js.6e1883c8716a169b9743.hot-update.js","sources":["webpack:////host/Users/loref/Projects/greldal/api/snippets.json"],"sourcesContent":["module.exports = {\"mapDataSource_user_simple\":{\"name\":\"mapDataSource_user_simple\",\"content\":\"    /// import {mapDataSource, mapFields, types} from \\\"greldal\\\";\\n\\n    const users = mapDataSource({\\n        name: \\\"User\\\",\\n        fields: mapFields({\\n            id: {\\n                type: types.number,\\n                to: GraphQLID,\\n                isPrimary: true,\\n            },\\n            name: {\\n                type: types.string,\\n            },\\n            age: {\\n                type: types.integer,\\n            },\\n        }),\\n    });\\n\"},\"mapDataSource_user_simple_explicit\":{\"name\":\"mapDataSource_user_simple_explicit\",\"content\":\"    /// import {mapDataSource, mapFields, types} from \\\"greldal\\\";\\n\\n    const users = mapDataSource({\\n        name: {\\n            mapped: \\\"User\\\",\\n            stored: \\\"users\\\",\\n        },\\n        fields: mapFields({\\n            id: {\\n                sourceColumn: \\\"id\\\",\\n                type: types.string,\\n                to: {\\n                    input: GraphQLID,\\n                    output: GraphQLID,\\n                },\\n            },\\n            name: {\\n                sourceColumn: \\\"name\\\",\\n                type: types.string,\\n                to: {\\n                    input: GraphQLString,\\n                    output: GraphQLString,\\n                },\\n            },\\n            age: {\\n                sourceColumn: \\\"age\\\",\\n                type: types.integer,\\n                to: {\\n                    input: GraphQLInt,\\n                    output: GraphQLInt,\\n                },\\n            },\\n        }),\\n    });\\n\"},\"mapSchema_insert_subscription\":{\"name\":\"mapSchema_insert_subscription\",\"content\":\"import { PubSub } from 'graphql-subscriptions'\\n    const pubsub = new PubSub()\\n            /// let\\n            schema = mapSchema([\\n                operationPresets.findOneOperation(users),\\n\\n                // When mapping an operation we can specify a publish function\\n                // which will publish insertion to a specified channel\\n                operationPresets.insertOneOperation(users, (mapping) => ({\\n                    ...mapping,\\n                    publish: (payload: MutationPublishPayload) => pubsub.publish(\\\"MUTATIONS\\\", payload)\\n                })),\\n\\n                // We define a subscription operation\\n                // which can listen to this channel\\n                {\\n                    operationType: \\\"subscription\\\" as const,\\n                    name: \\\"userInserted\\\",\\n                    fieldConfig: {\\n                        type: GraphQLList(new GraphQLObjectType({\\n                            name: \\\"UserInsertionNotification\\\",\\n                            fields: {\\n                                id: {\\n                                    type: GraphQLID\\n                                }\\n                            }\\n                        })),\\n                        resolve: (payload) => {\\n                            return payload.primary;\\n                        },\\n                        subscribe: () => pubsub.asyncIterator(\\\"MUTATIONS\\\")\\n                    }\\n                }\\n            ]);\\n\"},\"mapAssociation_multiJoin_custom\":{\"name\":\"mapAssociation_multiJoin_custom\",\"content\":\"                    /// import {mapDataSource, mapAssociations} from \\\"greldal\\\";\\n                    tags = mapDataSource({\\n                        name: \\\"Tag\\\",\\n                        fields,\\n                        associations: mapAssociations({\\n                            products: {\\n                                target: () => products,\\n                                singular: false,\\n                                fetchThrough: [\\n                                    {\\n                                        join: joinBuilder =>\\n                                            joinBuilder\\n                                                .leftOuterJoin(\\\"product_tag_associators\\\", \\\"tag_id\\\", \\\"=\\\", \\\"id\\\")\\n                                                .leftOuterJoin(\\\"products\\\", \\\"id\\\", \\\"=\\\", \\\"product_id\\\"),\\n                                    },\\n                                ],\\n                            },\\n                        }),\\n                    });\\n\"},\"mapAssociation_leftOuterJoin_default\":{\"name\":\"mapAssociation_leftOuterJoin_default\",\"content\":\"                    /// import {mapDataSource, mapAssociations} from \\\"greldal\\\";\\n                    products = mapDataSource({\\n                        name: \\\"Product\\\",\\n                        fields,\\n                        associations: mapAssociations({\\n                            department: {\\n                                target: () => departments,\\n                                singular: true,\\n                                fetchThrough: [\\n                                    {\\n                                        join: \\\"leftOuterJoin\\\",\\n                                    },\\n                                ],\\n                                associatorColumns: {\\n                                    inSource: \\\"department_id\\\",\\n                                    inRelated: \\\"id\\\",\\n                                },\\n                            },\\n                        }),\\n                    });\\n\"},\"mapAssociation_leftOuterJoin_default_query\":{\"name\":\"mapAssociation_leftOuterJoin_default_query\",\"content\":\"                        `\\n                            query {\\n                                findOneProduct(where: {}) {\\n                                    id\\n                                    name\\n                                    department(where: {}) {\\n                                        id\\n                                        name\\n                                    }\\n                                }\\n                            }\\n                        `,\\n\"},\"mapAssociation_sideLoading\":{\"name\":\"mapAssociation_sideLoading\",\"content\":\"            /// import {mapDataSource, mapAssociations} from \\\"greldal\\\";\\n\\n            const departments = mapDataSource({\\n                name: \\\"Department\\\",\\n                fields: mapFields(fields),\\n                associations: mapAssociations({\\n                    products: {\\n                        target: () => products,\\n                        singular: false,\\n                        associatorColumns: {\\n                            inSource: \\\"id\\\",\\n                            inRelated: \\\"department_id\\\",\\n                        },\\n                        fetchThrough: [\\n                            // We can define multiple side-loading strategies here.\\n                            //\\n                            // When user queried by id of department, then we don't have to wait for the query on departments to complete\\n                            // before we start fetching products. In case of preFetch strategy, these queries can happen in parallel, because\\n                            // given the parameters used to query the data source we can start a parallel query to fetch all the products in\\n                            // matching departments\\n                            {\\n                                useIf(operation) {\\n                                    return has(operation.args, [\\\"where\\\", \\\"id\\\"]);\\n                                },\\n                                preFetch(operation) {\\n                                    // What preFetch returns is a MappedForeignOperation - which basically points to another operation\\n                                    // in the related data source (findManyProducts) and the arguments needed to initiate this operation.\\n\\n                                    const args: any = operation.args;\\n                                    const department_id: string = args.where.id;\\n                                    return {\\n                                        operation: findManyProducts,\\n                                        args: {\\n                                            where: {\\n                                                department_id,\\n                                            },\\n                                        },\\n                                    };\\n                                },\\n                            },\\n\\n                            // However if the query parameters to departments are not enough to identify which products we need to fetch,\\n                            // we can wait for the departments\\n                            {\\n                                postFetch(_operation, parents) {\\n                                    // As above, we are instructing GRelDAL to initiate another operation in a foreign data source.\\n                                    // However, in this case this body will execute once the query on parents has finished. So we have an array of\\n                                    // fetched parents at our disposal which we can use to identify additional arguments to narrow down the\\n                                    // subset of products to fetch.\\n                                    return {\\n                                        operation: findManyProductsByDepartmentIdList,\\n                                        args: {\\n                                            department_ids: map(parents, \\\"id\\\"),\\n                                        },\\n                                    };\\n                                },\\n                            },\\n                        ],\\n                    },\\n                }),\\n            });\\n\"}}"],"mappings":";;;;;;;;;AAAA;;;;A","sourceRoot":""}