{"version":3,"file":"static/webpack/static\\development\\pages\\mapping-associations.js.ef8a920458e36c7f8f73.hot-update.js","sources":["webpack:///./pages/mapping-associations.md"],"sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import {NextPageLink} from \"../components/Link\";\nimport Link from \"next/link\";\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"mapping-queries-over-associations\"}}><MDXTag name=\"a\" components={components} parentName=\"h1\" props={{\"href\":\"#mapping-queries-over-associations\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Mapping Queries over Associations`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`While data sources derived from a single tables are useful in themselves, in larger applications, you'd likely have data stored across multiple tables. After all, the ability to join tables and enforce constraints on connected tables is what makes relational databases so powerful.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`GRelDAL makes it easy for you to take advantage of advanced features of relational databases, by providing APIs to link data sources through different loading strategies.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"associations-fetched-through-join-queries\"}}><MDXTag name=\"a\" components={components} parentName=\"h3\" props={{\"href\":\"#associations-fetched-through-join-queries\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Associations fetched through join queries`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can configure an association between multiple data sources to use a join.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-ts\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` products = mapDataSource({\n    name: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"Product\"`}</MDXTag>{`,\n    fields,\n    associations: mapAssociations({\n        department: {\n            target: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-function\"}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-params\"}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` departments,\n            singular: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-literal\"}}>{`true`}</MDXTag>{`,\n            fetchThrough: [\n                {\n                    join: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"leftOuterJoin\"`}</MDXTag>{`,\n                },\n            ],\n            associatorColumns: {\n                inSource: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"department_id\"`}</MDXTag>{`,\n                inRelated: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"id\"`}</MDXTag>{`,\n            },\n        },\n    }),\n});`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`So now, for a query like the following:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"metaString\":null}}>{`findManyProducts(where: {release_month: \"december\"}) {\n    id,\n    name,\n    department {\n        id,\n        name\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`GRelDAL will join the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`products`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`departments`}</MDXTag>{` table on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`department_id`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` columns.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You are not limited in how many tables you can join and how the joins should be performed. Even in case of multiple joins or recursive joins, GRelDAL can take care of reverse mapping the fetched data sets into the hierarchical format your client expects.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-ts\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` tags = mapDataSource({\n    name: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"Tag\"`}</MDXTag>{`,\n    fields,\n    associations: mapAssociations({\n        products: {\n            target: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-function\"}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-params\"}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` products,\n            singular: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-literal\"}}>{`false`}</MDXTag>{`,\n            fetchThrough: [\n                {\n                    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// Instead of the above configuration based join, we are now tapping into the underlying data access`}</MDXTag>{`\n                    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// library - Knex, to perform a join over multiple tables.`}</MDXTag>{`\n                    join: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-function\"}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-params\"}}>{`queryBuilder, aliasTreeVisitor`}</MDXTag>{`) =>`}</MDXTag>{` {\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// GRelDAL relies on aliases to alleviate conflicts and to properly map the`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// fetched data set (tabular) to the format the client expects (hierarchical).`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`//`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// So we need to use the aliases exposed through aliasTreeVisitor when querying the data source`}</MDXTag>{`\n\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// Lets derive visitors for the tables we intend to join`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` ptaVisitor = aliasTreeVisitor.visit(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"product_tag_associators\"`}</MDXTag>{`);\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` productsVisitor = ptaVisitor.visit(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"products\"`}</MDXTag>{`);\n\n                        queryBuilder\n                            .leftOuterJoin(\n                                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// Now we can obtain registered aliases from these visitors and use them in our queries`}</MDXTag>{`\n                                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`product_tag_associators as `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-subst\"}}>{`\\${ptaVisitor.alias}`}</MDXTag>{`\\``}</MDXTag>{`,\n                                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\``}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-subst\"}}>{`\\${ptaVisitor.alias}`}</MDXTag>{`.tag_id\\``}</MDXTag>{`,\n                                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\``}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-subst\"}}>{`\\${aliasTreeVisitor.alias}`}</MDXTag>{`.id\\``}</MDXTag>{`,\n                            )\n                            .leftOuterJoin(\n                                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`products as `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-subst\"}}>{`\\${productsVisitor.alias}`}</MDXTag>{`\\``}</MDXTag>{`,\n                                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\``}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-subst\"}}>{`\\${productsVisitor.alias}`}</MDXTag>{`.id\\``}</MDXTag>{`,\n                                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\``}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-subst\"}}>{`\\${ptaVisitor.alias}`}</MDXTag>{`.product_id\\``}</MDXTag>{`,\n                            );\n\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// Once we have constructed the query, we are done. We don't have to write any mapping logic`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// for converting the obtained results into the hierarchy of fields.`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`return`}</MDXTag>{` productsVisitor;\n                    },\n                },\n            ],\n        },\n    }),\n});`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"associations-fetched-through-batch-queries\"}}><MDXTag name=\"a\" components={components} parentName=\"h3\" props={{\"href\":\"#associations-fetched-through-batch-queries\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Associations fetched through batch queries:`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`An alternative to joins is to side-load the operations on related data sources.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note that in the below scenario, when we are fetching a department and related products, we are always making only two queries - irrespective of the number of departments or the number of products we have or how many of them end up in our result set. Both of these queries are batched, and once again we can fall back on GRelDAL do our reverse mapping for us.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-js\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` departments = mapDataSource({\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`name`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"Department\"`}</MDXTag>{`,\n    fields,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`associations`}</MDXTag>{`: mapAssociations({\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`products`}</MDXTag>{`: {\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`target`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-function\"}}><MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-params\"}}>{`()`}</MDXTag>{` =>`}</MDXTag>{` products,\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`singular`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-literal\"}}>{`false`}</MDXTag>{`,\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`associatorColumns`}</MDXTag>{`: {\n                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`inSource`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"id\"`}</MDXTag>{`,\n                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`inRelated`}</MDXTag>{`: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"department_id\"`}</MDXTag>{`,\n            },\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`fetchThrough`}</MDXTag>{`: [\n                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// We can define multiple side-loading strategies here.`}</MDXTag>{`\n                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`//`}</MDXTag>{`\n                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// When user queried by id of department, then we don't have to wait for the query on departments to complete`}</MDXTag>{`\n                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// before we start fetching products. In case of preFetch strategy, these queries can happen in parallel, because`}</MDXTag>{`\n                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// given the parameters used to query the data source we can start a parallel query to fetch all the products in`}</MDXTag>{`\n                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// matching departments`}</MDXTag>{`\n                {\n                    useIf(operation) {\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`return`}</MDXTag>{` has(operation.args, [`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"where\"`}</MDXTag>{`, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"id\"`}</MDXTag>{`]);\n                    },\n                    preFetch(operation) {\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// What preFetch returns is a MappedForeignQuery - which basically points to another operation`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// in the related data source (findManyProducts) and the arguments needed to initiate this operation.`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`//`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// Being able to compose operations defined on multiple data sources is one of the most compelling features`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// of GRelDAL.`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` department_id: string = operation.args.where.id;\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`return`}</MDXTag>{` {\n                            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`query`}</MDXTag>{`: findManyProducts,\n                            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`args`}</MDXTag>{`: {\n                                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`where`}</MDXTag>{`: {\n                                    department_id,\n                                },\n                            },\n                        };\n                    },\n                },\n\n                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// However if the query parameters to departments are not enough to identify which products we need to fetch,`}</MDXTag>{`\n                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// we can wait for the departments`}</MDXTag>{`\n                {\n                    postFetch(operation, parents) {\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// As above, we are instructing GRelDAL to initiate another operation in a foreign data source.`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// However, in this case this body will execute once the query on parents has finished. So we have an array of`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// fetched parents at our disposal which we can use to identify additional arguments to narrow down the`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-comment\"}}>{`// subset of products to fetch.`}</MDXTag>{`\n                        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`return`}</MDXTag>{` {\n                            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`query`}</MDXTag>{`: findManyProductsByDepartmentIdList,\n                            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`args`}</MDXTag>{`: {\n                                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-attr\"}}>{`department_ids`}</MDXTag>{`: map(parents, `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"id\"`}</MDXTag>{`),\n                            },\n                        };\n                    },\n                },\n            ],\n        },\n    }),\n});`}</MDXTag></MDXTag>\n<NextPageLink>Best Practices</NextPageLink></MDXTag>\n  "],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/IA;;;;A","sourceRoot":""}