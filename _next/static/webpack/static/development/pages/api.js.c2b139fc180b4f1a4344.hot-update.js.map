{"version":3,"file":"static/webpack/static\\development\\pages\\api.js.c2b139fc180b4f1a4344.hot-update.js","sources":["webpack:///./utils/api.js"],"sourcesContent":["const { merge, forEach, find, compact, map, flatten, memoize, get } = require(\"lodash\");\r\nconst climber = require(\"tree-climber\");\r\n\r\nfunction getAPINode(entityInfo) {\r\n    const name = getAPIName(entityInfo);\r\n    const path = name.split(\".\");\r\n    const root = {};\r\n    let curLevel = root;\r\n    path.forEach((fragment, index) => {\r\n        curLevel.name = fragment;\r\n        if (index === path.length - 1) {\r\n            curLevel.entity = entityInfo;\r\n            curLevel.children =\r\n                entityInfo.children &&\r\n                entityInfo.children.map(childEntityInfo => {\r\n                    const node = getAPINode(childEntityInfo);\r\n                    // node.entity.parent = entityInfo;\r\n                    return node;\r\n                });\r\n        } else {\r\n            curLevel.children = [{}];\r\n            curLevel = curLevel.children[0];\r\n        }\r\n    });\r\n    return root;\r\n}\r\n\r\nfunction injectIntoHierarchy(hierarchy, node) {\r\n    const prevChild = find(hierarchy, child => child.name === node.name);\r\n    if (!prevChild) {\r\n        hierarchy.push(node);\r\n        return;\r\n    }\r\n    prevChild.entity = prevChild.entity || node.entity;\r\n    if (node.children) {\r\n        prevChild.children = prevChild.children || [];\r\n        forEach(node.children, nextChild => {\r\n            injectIntoHierarchy(prevChild.children, nextChild);\r\n        });\r\n    }\r\n}\r\n\r\nfunction injectIntoEntity(entity, childEntity) {\r\n    entity.children = entity.children || [];\r\n    const prevChild = entity.children.find(c => c.name === childEntity.name);\r\n    if (prevChild) merge(prevChild, childEntity);\r\n    else entity.children.push(childEntity);\r\n}\r\n\r\nfunction findInHierarchy(root, entityPath) {\r\n    if (!root || !root.children || !entityPath.length) return root;\r\n    const child = root.children.find(child => child.name === entityPath[0]);\r\n    return findInHierarchy(child, entityPath.slice(1));\r\n}\r\n\r\nfunction findAnywhereInHierarchy(root, entityName) {\r\n    if (!root || !root.children) return null;\r\n    if (root.name === entityName) return root;\r\n    const child = root.children.find(c => findAnywhereInHierarchy(c, entityName));\r\n    if (child) return child;\r\n}\r\n\r\nconst getAllTags = memoize(entityInfo => {\r\n    return compact(flatten(map(compact([entityInfo].concat(entityInfo.signatures)), \"comment.tags\")));\r\n});\r\n\r\nfunction getAPIName(entityInfo) {\r\n    const nameTag = getAllTags(entityInfo).find(t => t.tag === \"name\");\r\n    if (nameTag) return nameTag.text.trim();\r\n    return entityInfo.name;\r\n}\r\n\r\nfunction getAPICategory(entityInfo) {\r\n    const tags = compact(flatten(map(compact([entityInfo].concat(entityInfo.signatures)), \"comment.tags\")));\r\n    const categoryTag = tags.find(t => t.tag === \"api-category\");\r\n    if (!categoryTag) return null;\r\n    const category = categoryTag.text.trim();\r\n    return category;\r\n}\r\n\r\nfunction getAPIHierarchy(apiData) {\r\n    const categories = {\r\n        PrimaryAPI: [],\r\n        ConfigType: [],\r\n        MapperClass: [],\r\n    };\r\n    const entities = {};\r\n    apiData.children.forEach(moduleInfo => {\r\n        if (!moduleInfo.children) return;\r\n        moduleInfo.children.forEach(entityInfo => {\r\n            const category = getAPICategory(entityInfo);\r\n            if (!category || !categories[category]) return;\r\n            const node = getAPINode(entityInfo);\r\n            injectIntoHierarchy(categories[category], node);\r\n            entities[getAPIName(entityInfo)] = node;\r\n        });\r\n    });\r\n    climber.climb(apiData, (key, value, path) => {\r\n        if (key === \"tag\" && value === \"memberof\") {\r\n            const tag = get(apiData, path.split(\".\").slice(0, -1));\r\n            const curEntity = get(apiData, path.split(\".\").slice(0, -4));\r\n            const parentNode = entities[tag.text.trim()];\r\n            if (!parentNode) return;\r\n            parentNode.children = parentNode.children || [];\r\n            injectIntoHierarchy(parentNode.children, {\r\n                entity: curEntity,\r\n                name: getAPIName(curEntity),\r\n            });\r\n            injectIntoEntity(parentNode.entity, curEntity);\r\n        }\r\n    });\r\n    return [\r\n        {\r\n            name: \"Primary API\",\r\n            toggled: true,\r\n            id: \"PrimaryAPI\",\r\n            children: categories.PrimaryAPI,\r\n            banners: [],\r\n        },\r\n        {\r\n            name: \"Configuration Types\",\r\n            toggled: true,\r\n            id: \"ConfigType\",\r\n            children: categories.ConfigType,\r\n            banners: [\r\n                {\r\n                    children:\r\n                        \"This page describes the type of a configuration type. Some of the functions exposed in the primary APIs would accept arguments of this type.\",\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            name: \"Mapper Classes\",\r\n            toggled: true,\r\n            id: \"MapperClass\",\r\n            children: categories.MapperClass,\r\n            banners: [\r\n                {\r\n                    children:\r\n                        \"This page describes a Mapper class which is instantiated by one of the functions exposed in primary APIs. You would usually not want to create instances of this class yourself.\",\r\n                },\r\n            ],\r\n        },\r\n    ];\r\n}\r\n\r\nmodule.exports = {\r\n    getAPINode,\r\n    injectIntoHierarchy,\r\n    findInHierarchy,\r\n    findAnywhereInHierarchy,\r\n    getAllTags,\r\n    getAPIName,\r\n    getAPICategory,\r\n    getAPIHierarchy,\r\n};\r\n"],"mappings":";;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAEA;AADA;AANA;AAaA;AACA;AACA;AACA;AACA;AAEA;AADA;AANA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;;;A","sourceRoot":""}