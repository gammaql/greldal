{"version":3,"file":"static/webpack/static\\development\\pages\\playground.js.84b538e1bb5a114a3edf.hot-update.js","sources":["webpack:///./pages/playground.js"],"sourcesContent":["import Knex from \"knex\";\r\nimport { useState } from \"react\";\r\nimport SQLJSClient from \"../utils/SQLJSClient\";\r\nimport * as greldal from \"../../../lib\";\r\nimport * as graphql from \"graphql\";\r\nimport Loadable from \"react-loadable\";\r\nimport SplitPane from \"react-split-pane\";\r\n\r\nconst Loading = () => <div>Loading...</div>;\r\n\r\nconst CodeMirror = Loadable({\r\n    loader: () => {\r\n        const CodeMirrorP = import(\"react-codemirror\");\r\n        return Promise.all([\r\n            CodeMirrorP,\r\n            import(\"codemirror/lib/codemirror.css\"),\r\n            import(\"codemirror/mode/javascript/javascript\"),\r\n            import(\"codemirror/theme/monokai.css\"),\r\n            import(\"codemirror/addon/hint/show-hint\"),\r\n            import(\"codemirror/addon/lint/lint\"),\r\n            import(\"codemirror-graphql/hint\"),\r\n            import(\"codemirror-graphql/lint\"),\r\n            import(\"codemirror-graphql/mode\"),\r\n        ]).then(() => CodeMirrorP);\r\n    },\r\n    loading: Loading,\r\n});\r\n\r\nconst AsyncFunction = Object.getPrototypeOf(eval(`(async function __test() {})`)).constructor;\r\n\r\nif (typeof window !== \"undefined\") {\r\n    window.Knex = Knex;\r\n    window.greldal = greldal;\r\n}\r\n\r\nconst defaultCode = `\r\n    greldal.useDatabaseConnector(knex);\r\n\r\n    await knex.schema.createTable(\"customers\", t => {\r\n        t.increments(\"pk\");\r\n        t.string(\"first_name\");\r\n        t.string(\"last_name\");\r\n    });\r\n\r\n    await knex(\"customers\").insert([\r\n        {first_name: \"Harry\", last_name: \"Granger\"},\r\n        {first_name: \"Ron\", last_name: \"Potter\"}\r\n    ]);\r\n\r\n    const fields = greldal.mapFields({\r\n        id: {\r\n            sourceColumn: \"pk\",\r\n            type: greldal.types.number,\r\n            to: {\r\n                input: graphql.GraphQLID,\r\n                output: graphql.GraphQLID,\r\n            },\r\n        },\r\n        firstName: {\r\n            sourceColumn: \"first_name\",\r\n            type: greldal.types.string,\r\n        },\r\n        lastName: {\r\n            sourceColumn: \"last_name\",\r\n            type: greldal.types.string,\r\n        },\r\n    });\r\n\r\n    const users = greldal.mapDataSource({\r\n        name: {\r\n            mapped: \"User\",\r\n            stored: \"customers\",\r\n        },\r\n        fields,\r\n    });\r\n\r\n    const schema = greldal.mapSchema(greldal.operationPresets.defaults(users));\r\n\r\n    return schema;\r\n`;\r\n\r\nconst defaultQuery = `\r\n    query { \r\n        findManyUsers(where: {}) { \r\n            id, \r\n            firstName, \r\n            lastName \r\n        }\r\n    }\r\n`;\r\n\r\nexport default function() {\r\n    const [code, setCode] = useState(defaultCode);\r\n    const [schema, setSchema] = useState(null);\r\n    const [query, setQuery] = useState(defaultQuery);\r\n    const [result, setResult] = useState(\"\");\r\n\r\n    const runCode = async () => {\r\n        const knex = Knex({\r\n            client: SQLJSClient,\r\n            debug: true,\r\n            pool: { min: 1, max: 1 },\r\n            acquireConnectionTimeout: 500,\r\n        });\r\n        knex.initialize();\r\n        const run = new AsyncFunction(\"Knex\", \"knex\", \"greldal\", \"graphql\", code);\r\n        try {\r\n            const schema = await run(Knex, knex, greldal, graphql);\r\n            setSchema(schema);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n\r\n    const queryAPI = () => {\r\n        if (!schema || !query) return;\r\n        graphql\r\n            .graphql(schema, query)\r\n            .then(res => setResult(res))\r\n            .catch(e => console.error(e));\r\n    };\r\n\r\n    return (\r\n        <div style={{ position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 }}>\r\n            <SplitPane split=\"vertical\" minSize={50}>\r\n                <CodeMirror options={{ theme: \"monokai\", mode: \"javascript\" }} value={code} onChange={setCode} />\r\n                <SplitPane split=\"horizontal\">\r\n                    <div>\r\n                        {schema && (\r\n                            <CodeMirror\r\n                                options={{\r\n                                    theme: \"monokai\",\r\n                                    mode: \"graphql\",\r\n                                    lint: {\r\n                                        schema,\r\n                                    },\r\n                                    hintOptions: {\r\n                                        schema,\r\n                                    },\r\n                                }}\r\n                                value={query}\r\n                                onChange={setQuery}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                    <div>\r\n                        <pre>{JSON.stringify(result, null, 2)}</pre>\r\n                    </div>\r\n                </SplitPane>\r\n            </SplitPane>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAUA;AAAA;AACA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA8CA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAJA;AAMA;AACA;AARA;AAAA;AAAA;AACA;AADA;AAUA;AACA;AAXA;AAAA;AACA;AADA;AAAA;AAAA;AAaA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAgBA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AANA;AAUA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;A","sourceRoot":""}