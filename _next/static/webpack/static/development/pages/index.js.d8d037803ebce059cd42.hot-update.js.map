{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.d8d037803ebce059cd42.hot-update.js","sources":["webpack:///./pages/index.md"],"sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import {NextPageLink, Link} from \"../components/Link\";\nimport {LibHeader} from \"../components/LibHeader\";\nimport {CodeSnippet} from \"../components/CodeSnippet\";\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}>\n<LibHeader />\n<div style={{fontSize: \"1.5rem\", lineHeight: \"2.5rem\", margin: \"2rem 0\", fontWeight: 100, color: \"slategray\"}}>\n  GRelDAL is a micro-framework for exposing your relational datastore as a GraphQL API powered by Node.js\n</div>\n<MDXTag name=\"p\" components={components}>{`The project is hosted on `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/gql-dal/greldal\"}}>{`GitHub`}</MDXTag>{`, and has a growing `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://travis-ci.org/gql-dal/greldal\"}}>{`test suite`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`GRelDAL is available for use under the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/gql-dal/greldal/blob/master/LICENSE\"}}>{`MIT software license`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can report bugs on the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/gql-dal/greldal/issues\"}}>{`GitHub issues page`}</MDXTag>{`. We also have a `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://spectrum.chat/greldal\"}}>{`Spectrum community`}</MDXTag>{` for general discussion.`}</MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"motive--goals\"}}><MDXTag name=\"a\" components={components} parentName=\"h1\" props={{\"href\":\"#motive--goals\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Motive / Goals`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://graphql.org/\"}}>{`GraphQL`}</MDXTag>{` is a powerful solution for making your server side data available to clients through a flexible and bandwidth efficient API.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`However, if your primary data source is a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`relational database`}</MDXTag>{` then mapping GraphQL queries to efficient database queries can be arduous. With naive hierarchical resolution of resolvers it is very easy to end up with inefficient data access patterns and `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://stackoverflow.com/questions/97197/what-is-the-n1-select-query-issue\"}}>{`N+1 queries`}</MDXTag>{`. Caching strategies, dataloader etc. partly mitigate the problem but the fact remains that you are not taking the full advantage of the capabilities of your powerful datastore.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`GRelDAL is a simple `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`low level`}</MDXTag>{` library that gives you a declaritive API to map your relational data sources to GraphQL APIs. It is data store agnostic thanks to `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://knexjs.org\"}}>{`Knex`}</MDXTag>{`, the underlying data access library that supports all common databases. Currently MySQL, PostgreSQL and SQLite are well tested.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When you generate your GraphQL API through GRelDAL, you can choose exactly how:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Your database table schema maps to GraphQL types.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Your GraphQL queries are mapped to SQL queries, including:`}</MDXTag>\n<MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`which tables can be joined under which circumstances`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`when batched queries can be performed`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`when related rows can be fetched in advance in bulk, etc.`}</MDXTag>\n</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`GRelDAL puts you on the `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`driver's seat`}</MDXTag>{`, gives you complete control and takes care of a lot of hairy mapping and reverse-mapping logic for you, allowing you to take full advantage of your database engine. It is assumed that you (or your team) has deep understanding of the capabilities your datastore and want to ensure that only efficient queries are allowed and the possibility of a client inadvertantly triggering complex inefficient database operations is minimized.`}</MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"installation\"}}><MDXTag name=\"a\" components={components} parentName=\"h1\" props={{\"href\":\"#installation\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Installation`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-sh\",\"metaString\":\"\"}}>{`// Using npm:\nnpm install --save greldal\n\n// Using yarn:\nyarn add greldal`}</MDXTag></MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"quick-start\"}}><MDXTag name=\"a\" components={components} parentName=\"h1\" props={{\"href\":\"#quick-start\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Quick Start`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"what-you-already-need-to-know-\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"href\":\"#what-you-already-need-to-know-\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`What you already need to know ?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In order to use GRelDAL you need to have a basic understanding of GraphQL. We don't cover GraphQL features in the docs here, but many great resources are available online, a particularly good example being `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.howtographql.com/\"}}>{`How to GraphQL`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You also need to have a good grasp over Javascript. Most examples here use ES6 features. If terms like harmony imports, arrow functions, destructuring sound unfamiliar, you may want to start out by reading `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://exploringjs.com/impatient-js/\"}}>{`Javascript for impatient programmers`}</MDXTag>{` and `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://exploringjs.com/es6/\"}}>{`Exploring ES6`}</MDXTag>{`, both authored by Dr. Axel Rauschmayer.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://typescriptlang.org\"}}>{`TypeScript`}</MDXTag>{` is not required, but recommended for larger projects. GRelDAL itself is written in TypeScript and comes with type definitions. We take a pragmatic stance towards `}<Link href=\"type-safety\">{`Type Safety`}</Link></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"basic-usage\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"href\":\"#basic-usage\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Basic Usage`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Using GRelDAL involves two steps:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Defining data sources mappers`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Defining operations on these data sources`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Generating a GraphQL Schema from these operations`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Exposing this schema through a HTTP Server`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"defining-a-data-source-mapper\"}}><MDXTag name=\"a\" components={components} parentName=\"h3\" props={{\"href\":\"#defining-a-data-source-mapper\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Defining a data source mapper`}</MDXTag>\n<CodeSnippet name=\"mapDataSource_user_simple\" />\n<MDXTag name=\"p\" components={components}>{`This defines a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`User`}</MDXTag>{` data source having three fields: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`name`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`age`}</MDXTag>{`. This essentially maps a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`users`}</MDXTag>{` table (having two columns `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`name`}</MDXTag>{`) in database to a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`GraphQLOutput`}</MDXTag>{` type with three fields `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`id`}</MDXTag>{` (type: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`GraphQLID`}</MDXTag>{`), `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`name`}</MDXTag>{` (type: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`GraphQLString`}</MDXTag>{`) and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`age`}</MDXTag>{` (type: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`GraphQLInt`}</MDXTag>{`).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note that the above configuration practically has zero duplication of information. We didn't have to specify the name of table this data source was linked to (it was inferred as plural of 'User'). Also, because our column names and field names are same we didn't have to specify them twice. When we have equivalent types available in typescript and GraphQL (eg. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`string`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`GraphQLString`}</MDXTag>{`) we don't have to specify the type mapping either. GRelDAL leverages `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://en.wikipedia.org/wiki/Convention_over_configuration\"}}>{`convention-over-configuration`}</MDXTag>{` to minimize the development effort.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`However, when you need, GRelDAL gives you complete control over the mapping. The guide on`}</MDXTag>\n<Link>Mapping Data Sources</Link>\ncovers this in more detail, but just to get a sense of what is happening here, the above config is equivalent to:\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-ts\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` users = mapDataSource({\n    name: {\n        mapped: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"User\"`}</MDXTag>{`,\n        stored: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"users\"`}</MDXTag>{`,\n    },\n    fields: {\n        id: {\n            sourceColumn: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"id\"`}</MDXTag>{`,\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`type`}</MDXTag>{`: types.string,\n            to: {\n                input: GraphQLID,\n                output: GraphQLID,\n            },\n        },\n        name: {\n            sourceColumn: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"name\"`}</MDXTag>{`,\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`type`}</MDXTag>{`: types.string,\n            to: {\n                input: GraphQLString,\n                output: GraphQLString,\n            },\n        },\n    },\n});`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"defining-operations\"}}><MDXTag name=\"a\" components={components} parentName=\"h3\" props={{\"href\":\"#defining-operations\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Defining operations`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once we have data sources, we can define operations on these data sources.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-ts\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`import`}</MDXTag>{` { operationPresets } `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`from`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"greldal\"`}</MDXTag>{`;\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` findManyUsers = operationPresets.query.findManyOperation(users);`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`GRelDAL comes with some operation presets. These operation presets make it trivial to perform CRUD operations on data sources with minimal code.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The above line of code defines a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`findMany`}</MDXTag>{` operation on the users data source.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The section on `}<Link>{`Mapping Operations`}</Link>{` covers more ground on defining custom operations and reusing operations.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"generating-graphql-schema\"}}><MDXTag name=\"a\" components={components} parentName=\"h3\" props={{\"href\":\"#generating-graphql-schema\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Generating GraphQL Schema`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once we have operations, we can expose them to the GraphQL API by mapping them to a schema:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-ts\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`import`}</MDXTag>{` { mapSchema } `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`from`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"greldal\"`}</MDXTag>{`;\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` generatedSchema = mapSchema([findManyUsers]);`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`generatedSchema`}</MDXTag>{` here is a `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://graphql.org/graphql-js/type/#graphqlschema\"}}>{`GraphQLSchema`}</MDXTag>{` instance which `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://graphql.org/graphql-js\"}}>{`graphql-js`}</MDXTag>{` can use for resoluton of operations.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this case, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`findMany`}</MDXTag>{` operation on users table can be invoked like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-ts\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`import`}</MDXTag>{` { graphql } `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`from`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"graphql\"`}</MDXTag>{`;\n\ngraphql(\n    generatedSchema,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`findManyUsers(where: {name: \"John\"}) {\n        id,\n        name\n    }\n    \\``}</MDXTag>{`,\n);`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"exposing-graphql-api\"}}><MDXTag name=\"a\" components={components} parentName=\"h3\" props={{\"href\":\"#exposing-graphql-api\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Exposing GraphQL API`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`While the ability to query the generated schema directly is useful in itself, most likely you are building a web application and you would like to expose this GraphQL schema through an API over HTTP.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are popular libraries already available for this, and this step is the same as what you would do when building any GraphQL API.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For example, if we are using `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://expressjs.com/\"}}>{`express`}</MDXTag>{` as our web framework, we can use the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/graphql/express-graphql\"}}>{`express-graphql`}</MDXTag>{` package to expose our GraphQL API.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-ts\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`import`}</MDXTag>{` express `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`from`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"express\"`}</MDXTag>{`;\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`import`}</MDXTag>{` graphqlHTTP `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`from`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"express-graphql\"`}</MDXTag>{`;\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` app = express();\n\napp.use(\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"/graphql\"`}</MDXTag>{`,\n    graphqlHTTP({\n        schema: generatedSchema,\n        graphiql: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-literal\"}}>{`true`}</MDXTag>{`\n    }),\n);\n\napp.listen(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-number\"}}>{`4000`}</MDXTag>{`);`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now if we visit `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://localhost:4000\"}}><MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`localhost:4000`}</MDXTag></MDXTag>{` in a browser, we will see a `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/graphql/graphiql\"}}>{`graphiql`}</MDXTag>{` interface which we can use to query our data source. We can also use any client side library like `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/apollographql/react-apollo\"}}>{`react-apollo`}</MDXTag>{` to interact with this API. No GRelDAL specific code is required on the client side.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"where-to-go-next-\"}}><MDXTag name=\"a\" components={components} parentName=\"h3\" props={{\"href\":\"#where-to-go-next-\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Where to go next ?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`GRelDAL `}<Link href=\"guides\">{`guides`}</Link>{` cover most important features and going through the guides will enable you hit the ground running building real world applications in no time.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can also checkout the `}<Link href=\"api\">{`API Documentation (WIP)`}</Link>{` and `}<a href=\"https://github.com/gql-dal/greldal\">{`Source Code`}</a>{`.`}</MDXTag></MDXTag>\n  "],"mappingszHA;;;;A","sourceRoot":""}