{"version":3,"file":"static/webpack/static\\development\\pages\\mapping-data-sources.js.4f591ebc811ee750b987.hot-update.js","sources":["webpack:///./pages/mapping-data-sources.md"],"sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import {NextPageLink, Link} from \"../components/Link\";\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"mapping-data-sources\"}}><MDXTag name=\"a\" components={components} parentName=\"h1\" props={{\"href\":\"#mapping-data-sources\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Mapping Data Sources`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Creation of a GraphQL API using GRelDAL essentially involves defining operations on data sources.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Operations are what we expose to the outside world through GraphQL queries and mutations and these operations interact with the data stored in our databases through data sources. These data sources are usually backed by tables, but they can also be backed by views, materialized views, joined tables, etc.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can use the mapSource function to map a datasource:`}</MDXTag>\n<CodeSnippet name=\"mapDataSource_user_simple\" />\n<MDXTag name=\"p\" components={components}>{`As we have already covered in the `}<Link href=\"#quick-start\">{`Quick Start`}</Link>{` the above configuration tells GRelDAL that we want to map the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`users`}</MDXTag>{` table (pluralized from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`User`}</MDXTag>{`) to a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`User`}</MDXTag>{` data source, and this data source will have two fields: id, name.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`GRelDAL's focus on convention over configuration reduces quite a bit of boilerplate from what would otherwise have been a more verbose mapping:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-ts\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` users = mapDataSource({\n    name: {\n        mapped: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"User\"`}</MDXTag>{`,\n        stored: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"users\"`}</MDXTag>{`,\n    },\n    fields: {\n        id: {\n            sourceColumn: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"id\"`}</MDXTag>{`,\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`type`}</MDXTag>{`: types.string,\n            to: {\n                input: GraphQLID,\n                output: GraphQLID,\n            },\n        },\n        name: {\n            sourceColumn: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"name\"`}</MDXTag>{`,\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`type`}</MDXTag>{`: types.string,\n            to: {\n                input: GraphQLString,\n                output: GraphQLString,\n            },\n        },\n    },\n});`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"type-specifications\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"href\":\"#type-specifications\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Type specifications`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note that for every field we had to specify a type. This type was specified through what we call runtime-types. The section on `}<Link>{`Type Safety`}</Link>{`\ngoes into more on detail on this, but essentially for all primitives we have corresponding runtime types:`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`| string  | types.string  |\n| number  | types.number  |\n| boolean | types.boolean |`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Some GraphQL types have no equivalent typescript type (eg. GraphQLInt, GraphQLID) and for them we can specifically mention the input and output types.\nIn case both are same (`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`{to: {input: GraphQLID, output: GraphQLID}}`}</MDXTag>{`) can can just specify them once (`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`{to: GraphQLID}`}</MDXTag>{`).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can compose these types to build composite types:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"metaString\":null}}>{`const addresses = types.array([\n    types.type({\n        street: types.string,\n        plot_no: types.number\n    })\n])\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Refer to the documentation of io-ts (which we simply re-export as types) for more details around using and defining runtime types.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"computed-fields\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"href\":\"#computed-fields\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Computed fields`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Fields don't necessarily have to map to columns one-to-one.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can have computed fields which depend on other column-based fields and are computed on the fly:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"metaString\":null}}>{`fields: {\n    fullName: {\n        dependencies: [\"firstName\", \"lastName\"],\n        derive: ({firstName, lastName}) => \\`\\${firstName} \\${lastName}\\`,\n        to: types.string\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"associations\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"href\":\"#associations\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Associations`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`GRelDAL supports linking together data sources through associations and performing operations that span across multiple data sources.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The section on `}<Link>{`association mapping`}</Link>{` will cover this in more detail.`}</MDXTag>\n<NextPageLink>Mapping Operations</NextPageLink></MDXTag>\n  "],"mappings":";;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/DA;;;;A","sourceRoot":""}