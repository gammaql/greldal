{"version":3,"file":"static/webpack/static\\development\\pages\\api.js.f807d1b033be4c78c47f.hot-update.js","sources":["webpack:///./components/APIContainer.js"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport qs from \"qs\";\r\nimport { compact, map, flatten, get } from \"lodash\";\r\n\r\nimport { PageLayout } from \"./PageLayout\";\r\nimport APITree from \"./APITree\";\r\nimport APIBody from \"./APIBody\";\r\nimport LibInfoBanner from \"./LibInfoBanner\";\r\nimport { SectionHeader } from \"./Sidebar\";\r\n\r\nimport memoize from \"lodash/memoize\";\r\nimport hierarchy from \"../../../api/api-hierarchy.json\";\r\nimport { getAPIName, getAPIHierarchy, getAPICategory, findInHierarchy } from \"../utils/api\";\r\nimport { HierarchyContext } from \"./HierarchyContext\";\r\n\r\nexport default class APIContainer extends React.Component {\r\n    state = {\r\n        hierarchy,\r\n        active: null,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.syncFromLocation();\r\n        window.addEventListener(\"popstate\", this.syncFromLocation);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"popstate\", this.syncFromLocation);\r\n    }\r\n\r\n    syncFromLocation = () => {\r\n        const search = location.search.slice(1);\r\n        if (!search) return;\r\n        this.setState({\r\n            active: qs.parse(search),\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { active, hierarchy } = this.state;\r\n        let activeCategory;\r\n        let rootEntity;\r\n        if (active && active.apiCategory) {\r\n            activeCategory = this.state.hierarchy.find(h => h.id === active.apiCategory);\r\n        }\r\n        const rootEntityName = active.rootEntityName || active.entityName;\r\n        const namePath = active.rootEntityName.split(\".\");\r\n        if (activeCategory && rootEntityName) {\r\n            rootEntity = findInHierarchy(activeCategory, namePath);\r\n            if (rootEntity) rootEntity = rootEntity.entity;\r\n        } else if (rootEntityName) {\r\n            for (const category of this.state.hierarchy) {\r\n                if (!rootEntity) {\r\n                    rootEntity = get(findInHierarchy(category, namePath), \"entity\");\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            <PageLayout\r\n                sidebar={\r\n                    <>\r\n                        {hierarchy.map(h => (\r\n                            <>\r\n                                <SectionHeader>{h.name}</SectionHeader>\r\n                                <APITree\r\n                                    hierarchy={h.children}\r\n                                    handleToggle={this.handleToggle}\r\n                                    handleClick={this.handleClick}\r\n                                />\r\n                            </>\r\n                        ))}\r\n                    </>\r\n                }\r\n            >\r\n                <NotificationBanner>API Documentation site is currently work in progress.</NotificationBanner>\r\n                {activeCategory &&\r\n                    activeCategory.banners.map(b => <NotificationBanner>{b.children}</NotificationBanner>)}\r\n                <HierarchyContext.Provider value={this.state.hierarchy}>\r\n                    <APIBody\r\n                        {...{\r\n                            activeCategory,\r\n                            rootEntity,\r\n                            activeEntityName: active && active.entityName,\r\n                        }}\r\n                    />\r\n                </HierarchyContext.Provider>\r\n            </PageLayout>\r\n        );\r\n    }\r\n    handleClick = memoize((name, entity) => event => {\r\n        if (!entity) return;\r\n        let rootEntity = entity;\r\n        while (rootEntity.parent) {\r\n            rootEntity = rootEntity.parent;\r\n        }\r\n        const active = {\r\n            apiCategory: getAPICategory(rootEntity),\r\n            rootEntityName: getAPIName(rootEntity),\r\n            entityName: getAPIName(entity),\r\n        };\r\n        this.setState({ active });\r\n        history.pushState(\r\n            null,\r\n            `GRelDAL Documentation | ${rootEntity.name} | ${entity.name}`,\r\n            `?${qs.stringify(active)}`,\r\n        );\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    });\r\n    handleToggle = (node, toggled) => {\r\n        node.toggled = toggled;\r\n        this.setState({ hierarchy: this.state.hierarchy });\r\n    };\r\n}\r\n\r\nconst Container = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n`;\r\n\r\nconst Pane = styled.div`\r\n    overflow: auto;\r\n    height: 100%;\r\n    padding: 10px;\r\n`;\r\n\r\nconst NotificationBanner = styled.div`\r\n    background: lemonchiffon;\r\n    border: 1px solid #ffe7bb;\r\n    padding: 5px;\r\n    color: orange;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n\r\n    & + & {\r\n        margin-top: 10px;\r\n    }\r\n`;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAaA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAoDA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAnBA;AACA;AAmBA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AA5FA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAUA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;AAzEA;AACA;AADA;AAoGA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}