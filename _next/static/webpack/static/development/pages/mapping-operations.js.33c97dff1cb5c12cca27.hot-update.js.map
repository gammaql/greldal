{"version":3,"file":"static/webpack/static\\development\\pages\\mapping-operations.js.33c97dff1cb5c12cca27.hot-update.js","sources":["webpack:///./pages/mapping-operations.md"],"sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import {NextPageLink} from \"../components/Link\";\nimport {CodeSnippet} from \"../components/CodeSnippet\";\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"mapping-operations\"}}><MDXTag name=\"a\" components={components} parentName=\"h1\" props={{\"href\":\"#mapping-operations\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Mapping Operations`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`GRelDAL supports two types of GraphQL operations: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://graphql.org/learn/schema/#the-query-and-mutation-types\"}}>{`Queries and Mutations`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let us say we have following data source mapping:`}</MDXTag>\n<CodeSnippet name=\"mapDataSource_user_simple\" />\n<MDXTag name=\"p\" components={components}>{`Now we want to allow users to operate on this data source.\nThe most convenient way to make this happen is through one of pre-defined operation presets.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-ts\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`import`}</MDXTag>{` {operationPresets} `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`from`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"greldal\"`}</MDXTag>{`;\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` schema = mapSchema([\n    operationPresets.query.findOneOperation(users)\n]);`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`A `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`findOne`}</MDXTag>{` operation allows us to query the users table like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"metaString\":null}}>{`query {\n    findOneUser(where: {id: 1}) {\n        id\n        name\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This will result in an SQL query like:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-sql\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`select`}</MDXTag>{`\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`GQL_DAL_users__4\\``}</MDXTag>{`.`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`id\\``}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`as`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`GQL_DAL_users__4__id\\``}</MDXTag>{`,\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`GQL_DAL_users__4\\``}</MDXTag>{`.`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`name\\``}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`as`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`GQL_DAL_users__4__name\\``}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`from`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`users\\``}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`as`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`GQL_DAL_users__4\\``}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`where`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`GQL_DAL_users__4\\``}</MDXTag>{`.`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\\`id\\``}</MDXTag>{` = `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-number\"}}>{`1`}</MDXTag>{`\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`limit`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-number\"}}>{`1`}</MDXTag></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The preset assumes that the properties of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`args.where`}</MDXTag>{` map exactly to field names and we want to fetch results that match all of these values.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"pagination-support\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"href\":\"#pagination-support\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Pagination support`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It is possible to add pagination support for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`findManyOperation`}</MDXTag>{` through `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`paginatedFindManyOperation`}</MDXTag>{` preset:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-ts\",\"metaString\":\"\"}}>{`mapSchema([operationPresets.paginatedFindManyOperation(users)]);`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The default implementation assumes sequentially incrementing primary fields and will fail if that is not the case.`}</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In real world applications we would often want more flexibility in terms of how the arguments map to queries.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We will see a couple of approaches for this:`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"computed-fields\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"href\":\"#computed-fields\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Computed Fields`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`One approach that we have already seen is by defining computed fields in the data source mapping. GRelDQL can automatically resolve computed fields by mapping them to underlying concrete fields and deriving computed values from them.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"argument-mapping\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"href\":\"#argument-mapping\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Argument Mapping`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can also specify the exact arguments we want to expose in our operation and how they map to SQL:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-ts\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` argMapping = mapArgs({\n    fullName: mapFields({\n        description: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"Full name of user\"`}</MDXTag>{`,\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`type`}</MDXTag>{`: t.string,\n        interceptQuery: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-function\"}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-params\"}}>{`queryBuilder: Knex.QueryBuilder, value: `}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-built_in\"}}>{`string`}</MDXTag></MDXTag>{`) =>`}</MDXTag>{` {\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` names = value.split(`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\" \"`}</MDXTag>{`);\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`return`}</MDXTag>{` queryBuilder.where({\n                first_name: names[`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-number\"}}>{`0`}</MDXTag>{`],\n                last_name: names[`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-number\"}}>{`1`}</MDXTag>{`],\n            });\n        },\n    }),\n});\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` schema = mapSchema([\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`new`}</MDXTag>{` MappedQueryOperation({\n        name: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"findUsersByFullName\"`}</MDXTag>{`,\n        rootSource: mappedDataSource,\n        singular: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-literal\"}}>{`true`}</MDXTag>{`,\n        args: argMapping,\n    }),\n]);`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"writing-custom-operation-resolvers\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"href\":\"#writing-custom-operation-resolvers\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Writing custom (operation) resolvers`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is the most flexible option: A custom resolver is a class that extends from OperationResolver and implements a resolve function that contains the logic of the operation and returns what the API expects.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`More often than not, a resolver will delegate to one or more of other operation resolvers as illustrated below:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"hljs language-ts\",\"metaString\":\"\"}}><MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`import`}</MDXTag>{` {OperationResolver} `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`from`}</MDXTag>{` `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`\"greldal\"`}</MDXTag>{`;\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` findOperation = operationPresets.query.findOneOperation(users);\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`class`}</MDXTag>{` CustomFindOperationResolver `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`extends`}</MDXTag>{` OperationResolver {\n    resolve() {\n        `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`return`}</MDXTag>{` findOperation.resolve({\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`this`}</MDXTag>{`.source,\n            {\n                department_id: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`this`}</MDXTag>{`.args.department\n            },\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`this`}</MDXTag>{`.context,\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`this`}</MDXTag>{`.resolveInfoRoot\n        });\n    }\n}\n\n`}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`const`}</MDXTag>{` schema = mapSchema([\n    `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`new`}</MDXTag>{` MappedQueryOperation({\n        name: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-string\"}}>{`'findByDepartmentId'`}</MDXTag>{`,\n        rootSource: users,\n        singular: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-literal\"}}>{`true`}</MDXTag>{`,\n        args: mapArgs({\n            department: {\n                `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`type`}</MDXTag>{`: t.string\n            }\n        }),\n        resolver: `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-function\"}}>{`(`}<MDXTag name=\"span\" components={components} parentName=\"span\" props={{\"className\":\"hljs-params\"}}>{`operation, source, context, args, resolveInfoRoot`}</MDXTag>{`) =>`}</MDXTag>{`\n            `}<MDXTag name=\"span\" components={components} parentName=\"code\" props={{\"className\":\"hljs-keyword\"}}>{`new`}</MDXTag>{` CustomFindOperationResolver(\n                operation,\n                source,\n                context,\n                args,\n                resolveInfoRoot\n            )\n    })\n]);`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`GRelDAL makes it easy to model complex business logic as a composition of individual operations by leveraging delegation.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"writing-custom-operation-mapping\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"href\":\"#writing-custom-operation-mapping\",\"aria-hidden\":\"true\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon icon-link\"}}></MDXTag></MDXTag>{`Writing custom operation mapping`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`While custom resolvers are flexible enough for most common scenarios, in some cases it may be helpful to write a custom operation mapping which provides a more granular control over how an operation is mapped to the graphql API.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This approach involves extending the MappedOperation class and providing a custom implementation for the graphQLOperation getter.`}</MDXTag>\n<MDXTag name=\"hr\" components={components}></MDXTag>\n<NextPageLink>Mapping Associations</NextPageLink></MDXTag>\n  "],"mappingssourceRoot":""}