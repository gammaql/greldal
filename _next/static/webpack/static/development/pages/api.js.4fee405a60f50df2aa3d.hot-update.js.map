{"version":3,"file":"static/webpack/static\\development\\pages\\api.js.4fee405a60f50df2aa3d.hot-update.js","sources":["webpack:///./components/APIContainer.js","webpack:///./components/APIEntityContainer.js","webpack:///./utils/api.js"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport qs from \"qs\";\r\nimport { compact, map, flatten } from \"lodash\";\r\n\r\nimport { PageLayout } from \"./PageLayout\";\r\nimport APITree from \"./APITree\";\r\nimport APIBody from \"./APIBody\";\r\nimport LibInfoBanner from \"./LibInfoBanner\";\r\nimport { SectionHeader } from \"./Sidebar\";\r\n\r\nimport memoize from \"lodash/memoize\";\r\nimport apiData from \"../../../api/api.json\";\r\nimport { getAPIName, getAPIHierarchy, getAPICategory, findInHierarchy } from \"../utils/api\";\r\n\r\nexport default class APIContainer extends React.Component {\r\n    state = {\r\n        hierarchy: getAPIHierarchy(apiData),\r\n        active: null,\r\n    };\r\n    componentDidMount() {\r\n        const search = location.search.slice(1);\r\n        if (!search) return;\r\n        this.setState({\r\n            active: qs.parse(search),\r\n        });\r\n    }\r\n    render() {\r\n        const { active, hierarchy } = this.state;\r\n        let activeCategory;\r\n        let rootEntity;\r\n        if (active && active.apiCategory) {\r\n            activeCategory = this.state.hierarchy.find(h => h.id === active.apiCategory);\r\n        }\r\n        if (activeCategory && active.rootEntityName) {\r\n            rootEntity = findInHierarchy(activeCategory, active.rootEntityName.split(\".\"));\r\n            if (rootEntity) rootEntity = rootEntity.entity;\r\n        }\r\n        return (\r\n            <PageLayout\r\n                sidebar={\r\n                    <>\r\n                        {hierarchy.map(h => (\r\n                            <>\r\n                                <SectionHeader>{h.name}</SectionHeader>\r\n                                <APITree\r\n                                    hierarchy={h.children}\r\n                                    handleToggle={this.handleToggle}\r\n                                    handleClick={this.handleClick}\r\n                                />\r\n                            </>\r\n                        ))}\r\n                    </>\r\n                }\r\n            >\r\n                <NotificationBanner>API Documentation site is currently work in progress.</NotificationBanner>\r\n                {activeCategory &&\r\n                    activeCategory.banners.map(b => <NotificationBanner>{b.children}</NotificationBanner>)}\r\n                <APIBody\r\n                    {...{\r\n                        activeCategory,\r\n                        rootEntity,\r\n                        activeEntityName: active && active.entityName,\r\n                    }}\r\n                />\r\n            </PageLayout>\r\n        );\r\n    }\r\n    handleClick = memoize((name, entity) => event => {\r\n        if (!entity) return;\r\n        let rootEntity = entity;\r\n        while (rootEntity.parent) {\r\n            rootEntity = rootEntity.parent;\r\n        }\r\n        const active = {\r\n            apiCategory: getAPICategory(rootEntity),\r\n            rootEntityName: getAPIName(rootEntity),\r\n            entityName: getAPIName(entity),\r\n        };\r\n        this.setState({ active });\r\n        history.pushState(\r\n            null,\r\n            `GRelDAL Documentation | ${rootEntity.name} | ${entity.name}`,\r\n            `?${qs.stringify(active)}`,\r\n        );\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    });\r\n    handleToggle = (node, toggled) => {\r\n        node.toggled = toggled;\r\n        this.setState({ hierarchy: this.state.hierarchy });\r\n    };\r\n}\r\n\r\nconst Container = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n`;\r\n\r\nconst Pane = styled.div`\r\n    overflow: auto;\r\n    height: 100%;\r\n    padding: 10px;\r\n`;\r\n\r\nconst NotificationBanner = styled.div`\r\n    background: lemonchiffon;\r\n    border: 1px solid #ffe7bb;\r\n    padding: 5px;\r\n    color: orange;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n\r\n    & + & {\r\n        margin-top: 10px;\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Collapsible from \"react-collapsible\";\r\n\r\nimport { TypePresenter } from \"./TypePresenter\";\r\nimport { getAPIName } from \"../utils/api\";\r\nimport { SectionHeader } from \"./Sidebar\";\r\nimport { ParamsTable } from \"./ParamsTable\";\r\n\r\nimport \"../styles/collapsible.css\";\r\n\r\nexport default class APIEntityContainer extends React.Component {\r\n    containerRef = React.createRef();\r\n\r\n    componentDidMount() {\r\n        this.bringToView();\r\n    }\r\n    componentDidUpdate() {\r\n        this.bringToView();\r\n    }\r\n\r\n    bringToView() {\r\n        if (this.props.activeEntityName && this.props.entity.name === this.props.activeEntityName) {\r\n            this.containerRef.current.scrollIntoView();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { entity, activeEntityName } = this.props;\r\n        return (\r\n            <div ref={this.containerRef}>\r\n                <EntityHeader>\r\n                    {entity.kindString && <div style={{ float: \"right\", color: \"silver\" }}>({entity.kindString})</div>}\r\n                    <h1>{getAPIName(entity)}</h1>\r\n                </EntityHeader>\r\n                {entity.comment &&\r\n                    entity.comment.shortText && (\r\n                        <Section>\r\n                            <SectionHeader>Description</SectionHeader>\r\n                            <p>{entity.comment.shortText}</p>\r\n                        </Section>\r\n                    )}\r\n                {entity.type && (\r\n                    <Section>\r\n                        <SectionHeader>Type</SectionHeader>\r\n                        <TypePresenter type={entity.type} />\r\n                    </Section>\r\n                )}\r\n                {entity.signatures &&\r\n                    entity.signatures.map(sig => (\r\n                        <>\r\n                            {sig.comment &&\r\n                                sig.comment.shortText && (\r\n                                    <section className=\"api-section\">\r\n                                        <SectionHeader>Description</SectionHeader>\r\n                                        <p>{sig.comment.shortText}</p>\r\n                                    </section>\r\n                                )}\r\n                            {sig.parameters &&\r\n                                sig.parameters.length > 0 && (\r\n                                    <Section>\r\n                                        <SectionHeader>Parameters</SectionHeader>\r\n                                        <ParamsTable params={sig.parameters} />\r\n                                    </Section>\r\n                                )}\r\n                        </>\r\n                    ))}\r\n                {entity.sources && (\r\n                    <Section>\r\n                        <SectionHeader>Sources</SectionHeader>\r\n                        <ul>\r\n                            {entity.sources.map(src => {\r\n                                const fileName = src.fileName.replace(/\\.d\\.ts$/, \".ts\");\r\n                                return (\r\n                                    <li>\r\n                                        <a href={`https://github.com/gql-dal/greldal/blob/master/src/${fileName}`}>\r\n                                            {fileName}\r\n                                        </a>\r\n                                    </li>\r\n                                );\r\n                            })}\r\n                        </ul>\r\n                    </Section>\r\n                )}\r\n                {entity.children && (\r\n                    <Section>\r\n                        <SectionHeader>Members</SectionHeader>\r\n                        <MemberListContainer>\r\n                            {entity.children.map(e => (\r\n                                <Collapsible\r\n                                    trigger={\r\n                                        <div>\r\n                                            {e.kindString && (\r\n                                                <div style={{ float: \"right\", color: \"silver\" }}>({e.kindString})</div>\r\n                                            )}\r\n                                            {getAPIName(e)}\r\n                                        </div>\r\n                                    }\r\n                                    open={activeEntityName && e.name === activeEntityName}\r\n                                >\r\n                                    <APIEntityContainer entity={e} activeEntityName={activeEntityName} />\r\n                                </Collapsible>\r\n                            ))}\r\n                        </MemberListContainer>\r\n                    </Section>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst Section = styled.section`\r\n    margin: 10px 0;\r\n`;\r\n\r\nconst EntityHeader = styled.div``;\r\n\r\nconst MemberListContainer = styled.div`\r\n    padding-left: 5px;\r\n    border-left: 4px solid #ddd;\r\n    padding-right: 0;\r\n    ${EntityHeader} {\r\n        display: none;\r\n    }\r\n`;\r\n","const { merge, forEach, find, compact, map, flatten, memoize, get } = require(\"lodash\");\r\nconst climber = require(\"tree-climber\");\r\n\r\nfunction getAPINode(entityInfo) {\r\n    const name = getAPIName(entityInfo);\r\n    const path = name.split(\".\");\r\n    const root = {};\r\n    let curLevel = root;\r\n    path.forEach((fragment, index) => {\r\n        curLevel.name = fragment;\r\n        if (index === path.length - 1) {\r\n            curLevel.entity = entityInfo;\r\n            curLevel.children =\r\n                entityInfo.children &&\r\n                entityInfo.children.map(childEntityInfo => {\r\n                    const node = getAPINode(childEntityInfo);\r\n                    // node.entity.parent = entityInfo;\r\n                    return node;\r\n                });\r\n        } else {\r\n            curLevel.children = [{}];\r\n            curLevel = curLevel.children[0];\r\n        }\r\n    });\r\n    return root;\r\n}\r\n\r\nfunction injectIntoHierarchy(hierarchy, node) {\r\n    const prevChild = find(hierarchy, child => child.name === node.name);\r\n    if (!prevChild) {\r\n        hierarchy.push(node);\r\n        return;\r\n    }\r\n    prevChild.entity = prevChild.entity || node.entity;\r\n    if (node.children) {\r\n        prevChild.children = prevChild.children || [];\r\n        forEach(node.children, nextChild => {\r\n            injectIntoHierarchy(prevChild.children, nextChild);\r\n        });\r\n    }\r\n}\r\n\r\nfunction injectIntoEntity(entity, childEntity) {\r\n    entity.children = entity.children || [];\r\n    const prevChild = entity.children.find(c => c.name === childEntity.name);\r\n    if (prevChild) merge(prevChild, childEntity);\r\n    else entity.children.push(childEntity);\r\n}\r\n\r\nfunction findInHierarchy(root, entityPath) {\r\n    if (!root || !root.children || !entityPath.length) return root;\r\n    const child = root.children.find(child => child.name === entityPath[0]);\r\n    return findInHierarchy(child, entityPath.slice(1));\r\n}\r\n\r\nconst getAllTags = memoize(entityInfo => {\r\n    return compact(flatten(map(compact([entityInfo].concat(entityInfo.signatures)), \"comment.tags\")));\r\n});\r\n\r\nfunction getAPIName(entityInfo) {\r\n    const nameTag = getAllTags(entityInfo).find(t => t.tag === \"name\");\r\n    if (nameTag) return nameTag.text.trim();\r\n    return entityInfo.name;\r\n}\r\n\r\nfunction getAPICategory(entityInfo) {\r\n    const tags = compact(flatten(map(compact([entityInfo].concat(entityInfo.signatures)), \"comment.tags\")));\r\n    const categoryTag = tags.find(t => t.tag === \"api-category\");\r\n    if (!categoryTag) return null;\r\n    const category = categoryTag.text.trim();\r\n    return category;\r\n}\r\n\r\nfunction getAPIHierarchy(apiData) {\r\n    const categories = {\r\n        PrimaryAPI: [],\r\n        ConfigType: [],\r\n        MapperClass: [],\r\n    };\r\n    const entities = {};\r\n    apiData.children.forEach(moduleInfo => {\r\n        if (!moduleInfo.children) return;\r\n        moduleInfo.children.forEach(entityInfo => {\r\n            const category = getAPICategory(entityInfo);\r\n            if (!category || !categories[category]) return;\r\n            const node = getAPINode(entityInfo);\r\n            injectIntoHierarchy(categories[category], node);\r\n            entities[getAPIName(entityInfo)] = node;\r\n        });\r\n    });\r\n    climber.climb(apiData, (key, value, path) => {\r\n        if (key === \"tag\" && value === \"memberof\") {\r\n            const tag = get(apiData, path.split(\".\").slice(0, -1));\r\n            const curEntity = get(apiData, path.split(\".\").slice(0, -4));\r\n            const parentNode = entities[tag.text.trim()];\r\n            if (!parentNode) return;\r\n            parentNode.children = parentNode.children || [];\r\n            injectIntoHierarchy(parentNode.children, {\r\n                entity: curEntity,\r\n                name: getAPIName(curEntity),\r\n            });\r\n            injectIntoEntity(parentNode.entity, curEntity);\r\n        }\r\n    });\r\n    return [\r\n        {\r\n            name: \"Primary API\",\r\n            toggled: true,\r\n            id: \"PrimaryAPI\",\r\n            children: categories.PrimaryAPI,\r\n            banners: [],\r\n        },\r\n        {\r\n            name: \"Configuration Types\",\r\n            toggled: true,\r\n            id: \"ConfigType\",\r\n            children: categories.ConfigType,\r\n            banners: [\r\n                {\r\n                    children:\r\n                        \"This page describes the type of a configuration type. Some of the functions exposed in the primary APIs would accept arguments of this type.\",\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            name: \"Mapper Classes\",\r\n            toggled: true,\r\n            id: \"MapperClass\",\r\n            children: categories.MapperClass,\r\n            banners: [\r\n                {\r\n                    children:\r\n                        \"This page describes a Mapper class which is instantiated by one of the functions exposed in primary APIs. You would usually not want to create instances of this class yourself.\",\r\n                },\r\n            ],\r\n        },\r\n    ];\r\n}\r\n\r\nmodule.exports = {\r\n    getAPINode,\r\n    injectIntoHierarchy,\r\n    findInHierarchy,\r\n    getAllTags,\r\n    getAPIName,\r\n    getAPICategory,\r\n    getAPIHierarchy,\r\n};\r\n"],"mappings":"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","sourceRoot":""}