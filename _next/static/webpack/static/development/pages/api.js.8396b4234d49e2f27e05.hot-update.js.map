{"version":3,"file":"static/webpack/static\\development\\pages\\api.js.8396b4234d49e2f27e05.hot-update.js","sources":["webpack:///./components/APIBody.js"],"sourcesContent":["import APIEntityContainer, {APIContainer} from \"./APIEntityContainer\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"./Link\";\r\n\r\nexport const EmptyMsgContainer = styled.div`\r\n    color: silver;\r\n    font-weight: 900;\r\n    font-size: 3rem;\r\n    padding: 20px;\r\n    padding-top: 100px;\r\n    text-align: center;\r\n    line-height: 4rem;\r\n`;\r\n\r\nexport function APIIntro(props) {\r\n    return (\r\n        <APIContainer>\r\n            <h1>Welcome to GRelDAL's API Documentation </h1>\r\n            <div>\r\n                Please make sure that you have first gone through the <Link href=\"guides\">Guides</Link> before diving\r\n                deep into the API docs.\r\n            </div>\r\n            <div>\r\n                <h1>Terms</h1>\r\n                <p>Summary of the terminology used in the API docs</p>\r\n                <ul>\r\n                    <li>\r\n                        <strong>DataSource</strong>\r\n                        <p>\r\n                            A DataSource is a mapper that mediates operations against a table/view in the persistence\r\n                            layer.\r\n                        </p>\r\n                        <p>\r\n                            DataSources are expected to have a fixed set of <strong>fields</strong> (see below) and can\r\n                            interact with other data sources through <strong>associations</strong> (see below).\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <strong>Entity</strong>\r\n                        <p>\r\n                            Entities are plain JavaScript objects returned by operations on data sources.\r\n                        </p>\r\n                        <p>\r\n                            The shape of an entity may not be same as rows in the underlying persistence layer (table or\r\n                            view) and whenever required, the DataSource will perform coversion between rows and\r\n                            entities.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <strong>Row</strong>\r\n                        <p>\r\n                            In the documentation here, rows always refer to rows in a table/view in the persistence\r\n                            layer.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <strong>Association</strong>\r\n                        <p>An association is a link using which operations can span over multiple data source</p>\r\n                    </li>\r\n                    <li>\r\n                        <strong>Field</strong>\r\n                        <p>\r\n                            A field refers to an attribute in an Entity. A field can either be directly mapped from a\r\n                            column or be derived from a combination of multiple columns.\r\n                        </p>\r\n                        <p>\r\n                            The <Link href=\"mapping-data-sources\">DataSource mapping guide</Link> elaborates more on\r\n                            mapping fields.\r\n                        </p>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div>\r\n                <h1>Important top level functions</h1>\r\n                <ul>\r\n                    <li>\r\n                        <strong>useDatabaseConnector</strong>\r\n                        <p>\r\n                            Configures a knex instance to be used for connecting to the database. For polyglot\r\n                            persistence, we can also specify a knex instance at a data source level.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <strong>mapDataSource</strong>\r\n                        <p>\r\n                            Map tables (or views) in database to data sources which operations exposed through the\r\n                            GraphQL schema can interact with.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <strong>mapSchema</strong>\r\n                        <p>Derive a GraphQL schema from GRelDAL data sources and operations.</p>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <h2>Looking for a particular class/function ?</h2>\r\n            <p>‚Üê Find it through the sidebar</p>\r\n        </APIContainer>\r\n    );\r\n}\r\n\r\nexport default function APIBody(props) {\r\n    if (!props.activeCategory || !props.rootEntity) {\r\n        return <APIIntro />;\r\n    }\r\n    return <APIEntityContainer entity={props.rootEntity} activeEntityName={props.activeEntityName} />;\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}