{"version":3,"file":"static/webpack/static/development/pages/api-2.js.ecd42a901e6d2abf7fbd.hot-update.js","sources":["webpack:///./components/APIContainer.js"],"sourcesContent":["import React from \"react\";\nimport qs from \"qs\";\n\nimport { PageLayout } from \"./PageLayout\";\nimport APITree from \"./APITree\";\nimport APIBody from \"./APIBody\";\nimport { SectionHeader } from \"./Sidebar\";\n\nimport memoize from \"lodash/memoize\";\nimport hierarchy from \"../../../api/api-hierarchy.json\";\nimport { getAPIName, getAPICategory, findInHierarchy } from \"../utils/api\";\nimport { HierarchyContext } from \"./HierarchyContext\";\nimport NotificationBanner from \"./NotificationBanner\";\n\nexport default class APIContainer extends React.Component {\n    state = {\n        hierarchy,\n        active: null,\n    };\n\n    componentDidMount() {\n        this.syncFromLocation();\n        window.addEventListener(\"popstate\", this.syncFromLocation);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"popstate\", this.syncFromLocation);\n    }\n\n    syncFromLocation = () => {\n        const search = location.search.slice(1);\n        if (!search) return;\n        this.setState({\n            active: qs.parse(search),\n        });\n    };\n\n    render() {\n        const { active, hierarchy } = this.state;\n        let activeCategory;\n        let rootEntity;\n        if (active && active.rootEntityName) {\n            const entityPath = active.rootEntityName.split(\".\");\n            for (const category of this.state.hierarchy) {\n                const node = findInHierarchy(category, entityPath);\n                if (node) {\n                    activeCategory = category;\n                    rootEntity = node.entity;\n                    break;\n                }\n            }\n        }\n        return (\n            <PageLayout\n                sidebar={\n                    <>\n                        {hierarchy.map(h => (\n                            <>\n                                <SectionHeader>{h.name}</SectionHeader>\n                                <APITree\n                                    hierarchy={h.children}\n                                    handleToggle={this.handleToggle}\n                                    handleClick={this.handleClick}\n                                />\n                            </>\n                        ))}\n                    </>\n                }\n            >\n                {activeCategory &&\n                    activeCategory.banners.map(b => <NotificationBanner>{b.children}</NotificationBanner>)}\n                <HierarchyContext.Provider value={this.state.hierarchy}>\n                    <APIBody\n                        {...{\n                            activeCategory,\n                            rootEntity,\n                            activeEntityName: active && active.entityName,\n                        }}\n                    />\n                </HierarchyContext.Provider>\n            </PageLayout>\n        );\n    }\n\n    handleClick = memoize((name, entity) => event => {\n        if (!entity) return;\n        let rootEntity = entity;\n        while (rootEntity.parent) {\n            rootEntity = rootEntity.parent;\n        }\n        const active = {\n            apiCategory: getAPICategory(rootEntity),\n            rootEntityName: getAPIName(rootEntity),\n            entityName: getAPIName(entity),\n        };\n        this.setState({ active });\n        history.pushState(\n            null,\n            `GRelDAL Documentation | ${rootEntity.name} | ${entity.name}`,\n            `?${qs.stringify(active)}`,\n        );\n        event.stopPropagation();\n        event.preventDefault();\n    });\n    handleToggle = (node, toggled) => {\n        node.toggled = toggled;\n        this.setState({ hierarchy: this.state.hierarchy });\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAaA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAgDA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAnBA;AACA;AAmBA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AAxFA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAUA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;AApEA;AACA;;;;;A","sourceRoot":""}