{"version":3,"file":"static/webpack/static\\development\\pages\\api.js.0773d9e9c3367a649d6e.hot-update.js","sources":["webpack:///./components/APIEntityContainer.js"],"sourcesContent":["import React from \"react\";\r\nimport marked from \"marked\";\r\nimport styled from \"styled-components\";\r\nimport Collapsible from \"react-collapsible\";\r\nimport { uniqBy, get, find } from \"lodash\";\r\n\r\nimport { TypePresenter } from \"./TypePresenter\";\r\nimport { getAPIName } from \"../utils/api\";\r\nimport { SectionHeader } from \"./Sidebar\";\r\nimport { ParamsTable } from \"./ParamsTable\";\r\n\r\nimport \"../styles/collapsible.css\";\r\n\r\nmarked.setOptions({\r\n    gfm: true,\r\n    tables: true,\r\n});\r\n\r\nexport default class APIEntityContainer extends React.Component {\r\n    containerRef = React.createRef();\r\n\r\n    componentDidMount() {\r\n        this.bringToView();\r\n    }\r\n    componentDidUpdate() {\r\n        this.bringToView();\r\n    }\r\n\r\n    bringToView() {\r\n        if (this.props.activeEntityName && this.props.entity.name === this.props.activeEntityName) {\r\n            this.containerRef.current.scrollIntoView();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { entity, activeEntityName } = this.props;\r\n        return (\r\n            <div ref={this.containerRef}>\r\n                <EntityHeader>\r\n                    {entity.kindString && <div style={{ float: \"right\", color: \"silver\" }}>({entity.kindString})</div>}\r\n                    <h1>{getAPIName(entity)}</h1>\r\n                </EntityHeader>\r\n                {entity.comment && this.renderDescription()}\r\n                {entity.type && (\r\n                    <Section>\r\n                        <SectionHeader>Type</SectionHeader>\r\n                        <TypePresenter type={entity.type} />\r\n                    </Section>\r\n                )}\r\n                {entity.signatures &&\r\n                    entity.signatures.map(sig => (\r\n                        <>\r\n                            {sig.comment &&\r\n                                sig.comment.shortText && (\r\n                                    <section className=\"api-section\">\r\n                                        <SectionHeader>Description</SectionHeader>\r\n                                        <p>{sig.comment.shortText}</p>\r\n                                    </section>\r\n                                )}\r\n                            {sig.parameters &&\r\n                                sig.parameters.length > 0 && (\r\n                                    <Section>\r\n                                        <SectionHeader>Parameters</SectionHeader>\r\n                                        <ParamsTable params={sig.parameters} />\r\n                                    </Section>\r\n                                )}\r\n                            {sig.type && (\r\n                                <Section>\r\n                                    <SectionHeader>Returns</SectionHeader>\r\n                                    {get(find(entity.tags, { tag: \"returns\" }), \"text\")}\r\n                                    <TypePresenter type={sig.type} />\r\n                                </Section>\r\n                            )}\r\n                        </>\r\n                    ))}\r\n                {entity.sources && (\r\n                    <Section>\r\n                        <SectionHeader>Sources</SectionHeader>\r\n                        <ul>\r\n                            {uniqBy(entity.sources, s => s.fileName).map(src => {\r\n                                const fileName = src.fileName.replace(/\\.d\\.ts$/, \".ts\");\r\n                                return (\r\n                                    <li>\r\n                                        <a href={`https://github.com/gql-dal/greldal/blob/master/src/${fileName}`}>\r\n                                            {fileName}\r\n                                        </a>\r\n                                    </li>\r\n                                );\r\n                            })}\r\n                        </ul>\r\n                    </Section>\r\n                )}\r\n                {entity.children && (\r\n                    <Section>\r\n                        <SectionHeader>Members</SectionHeader>\r\n                        <MemberListContainer>\r\n                            {entity.children.map(e => (\r\n                                <Collapsible\r\n                                    trigger={\r\n                                        <div>\r\n                                            {e.kindString && (\r\n                                                <div style={{ float: \"right\", color: \"silver\" }}>({e.kindString})</div>\r\n                                            )}\r\n                                            {getAPIName(e)}\r\n                                        </div>\r\n                                    }\r\n                                    open={activeEntityName && e.name === activeEntityName}\r\n                                >\r\n                                    <APIEntityContainer entity={e} activeEntityName={activeEntityName} />\r\n                                </Collapsible>\r\n                            ))}\r\n                        </MemberListContainer>\r\n                    </Section>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderDescription() {\r\n        const { entity } = this.props;\r\n        if (!entity.comment) return null;\r\n        const { text, shortText } = entity.comment;\r\n        if (text) return <div dangerouslySetInnerHTML={{ __html: marked(text) }} />;\r\n        return <div>{shortText}</div>;\r\n    }\r\n}\r\n\r\nconst Section = styled.section`\r\n    margin: 10px 0;\r\n`;\r\n\r\nconst EntityHeader = styled.div``;\r\n\r\nconst MemberListContainer = styled.div`\r\n    padding-left: 5px;\r\n    border-left: 4px solid #ddd;\r\n    padding-right: 0;\r\n    ${EntityHeader} {\r\n        display: none;\r\n    }\r\n`;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AACA;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AAoBA;;;AAEA;AAAA;AAEA;AAFA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AA1GA;AACA;AADA;AA6GA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}