(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{aGJB:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/subscriptions",function(){return n("mz0a")}])},mz0a:function(e,a,n){"use strict";n.r(a);var t=n("HbGN"),o=n("ERkP"),s=n.n(o),i=n("yTr/"),p=n("YNhk"),m=(n("jvFD"),n("dlzS")),c=s.a.createElement;a.default=function(e){var a=e.components;Object(t.a)(e,["components"]);return c(i.MDXTag,{name:"wrapper",components:a},c(i.MDXTag,{name:"h1",components:a,props:{id:"subscriptions"}},c(i.MDXTag,{name:"a",components:a,parentName:"h1",props:{href:"#subscriptions","aria-hidden":"true",tabIndex:-1}},c(i.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon icon-link"}})),"Subscriptions"),c(i.MDXTag,{name:"p",components:a},"It is easy to use ",c(i.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://github.com/apollographql/graphql-subscriptions"}},"graphql-subscriptions")," alongside GRelDAL to support real-time subscriptions."),c(m.a,{name:"mapSchema_insert_subscription"}),c(i.MDXTag,{name:"p",components:a},"NotificationDispatcher facilitates adding interceptors which can receive mutation events and add additional metadata to them, add additional mutation events to be published in same batch or prevent certain mutation events from being dispatched. "),c(i.MDXTag,{name:"h2",components:a,props:{id:"notifying-about-associated-data-sources"}},c(i.MDXTag,{name:"a",components:a,parentName:"h2",props:{href:"#notifying-about-associated-data-sources","aria-hidden":"true",tabIndex:-1}},c(i.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon icon-link"}})),"Notifying about associated data sources"),c(i.MDXTag,{name:"p",components:a},"A common use case is that from an application perspective certain entities can be thought of as belonging to other entities.\nSo in that case, we would want to trigger mutation events for one or more associated entities when an entitiy is mutated."),c(i.MDXTag,{name:"p",components:a},"For example, if a Comment entity is inserted, then we may want to notify that a Post has been updated. "),c(i.MDXTag,{name:"p",components:a},"Common pattern for this is that in an operation interceptor we can trigger other operations (eg. queries to identify associated models) and trigger additional mutation events for them."),c(i.MDXTag,{name:"h2",components:a,props:{id:"notifications-from-outside-greldal"}},c(i.MDXTag,{name:"a",components:a,parentName:"h2",props:{href:"#notifications-from-outside-greldal","aria-hidden":"true",tabIndex:-1}},c(i.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon icon-link"}})),"Notifications from outside GRelDAL"),c(i.MDXTag,{name:"p",components:a},"Notifications don't have to originate from inside GRelDAL or even GraphQL operations. It is straightforward to directly use ",c(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"NotificationDispatcher")," and dispatch notifications from anywhere in your application code eg. background jobs, command line scripts etc."),c(i.MDXTag,{name:"pre",components:a},c(i.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-ts",metaString:""}},"NotificationDispatcher.dispatch({\n    ",c(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// Type is commonly used to distinguish between notifications"),"\n    ",c(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// in the interceptors"),"\n    ",c(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"type"),": ",c(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},'"OrderDispatchCompletion"'),",\n\n    ",c(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// (Optional) List of entities which were affected by the change"),"\n    ",c(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// that caused this notification"),"\n    entities: [\n        {id: ",c(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-number"}},"10"),", name: ",c(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},'"Key"'),"},\n        {id: ",c(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-number"}},"11"),", name: ",c(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},'"KeyChain"'),"}\n    ],\n\n    ",c(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// Application specific metadata attached to this notification"),"\n    metadata: {\n        priority: ",c(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-number"}},"1"),"\n    }\n});")),c(p.b,null,"Best Practices"))}}},[["aGJB",1,0,2,3,4,5,6,7,8]]]);